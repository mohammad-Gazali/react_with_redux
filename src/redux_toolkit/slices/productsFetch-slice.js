import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";


export const fetchProducts = createAsyncThunk(
    "fetch/products",  // this string is like the type that is generated by createSlice in its actions [ for example the type was in bank like this for withdraw: "bankSlice/withdraw" ]
    async () => {
        const res = await fetch("https://fakestoreapi.com/products/")
        const data = await res.json()
        return data
    }
)

const fetchProductsSlice = createSlice({
    initialState: [], 
    name: "fetchProductsSlice", 
    
    //! we use with async functions extraReducers NOT reducers
    //* extraReducers key take a value of a function that take builder as a parameter
    //* in extraReducers we can add custom case for owr reducer
    //* example below is perfect for promises (if promise is in pending => do this, and if promise is fulfilled => do another action, and etc...)
    extraReducers: (builder) => {
        builder.addCase(fetchProducts.pending, (state, action) => {
            console.log("Loading....");
        })
        builder.addCase(fetchProducts.fulfilled, (state, action) => {
            state = action.payload
            return state
        })
        builder.addCase(fetchProducts.rejected, (state, action) => {
            console.log("Rejected");
        })
    }
})

export default fetchProductsSlice.reducer

